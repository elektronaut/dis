env:
  RUBY_VERSION: 3.0
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: dis_test
  CC_TEST_REPORTER_ID: 75d1da76d5a205a703da8a9c13c7147bec4bd765dbb1195d85664f424b51cbf1

name: Build
on:
  push:
    branches:
      - main
      - develop
  pull_request:
jobs:
  rubocop-test:
    name: Rubocop
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      - uses: actions/checkout@v1
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          ruby-version: 3.1
      - name: Check code
        run: bundle exec rubocop

  rspec-test:
    name: RSpec
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby: ['2.7', '3.0', '3.1']
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true
      - name: Install system dependencies
        run: sudo apt-get install -y libpq-dev libsqlite3-dev
      - name: Create database
        env:
          DB: postgres
          RAILS_ENV: test
          PGHOST: localhost
          PGUSER: ${{ env.POSTGRES_USER }}
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
        run: |
          bundle exec rake db:migrate
      - name: Run tests
        env:
          DB: postgres
          PGHOST: localhost
          PGUSER: ${{ env.POSTGRES_USER }}
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
        run: bundle exec rspec
      - name: Send results to Code Climate
        uses: paambaati/codeclimate-action@v2.6.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageCommand: ls
